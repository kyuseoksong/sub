{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\sub\\\\src\\\\components\\\\Dashboard\\\\SubscriptionDashboard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { SubscriptionSummary } from './SubscriptionSummary';\nimport { SubscriptionList } from './SubscriptionList';\nimport { mockSubscriptions } from '../../data/mockData';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const SubscriptionDashboard = ({\n  userId\n}) => {\n  _s();\n  const [subscriptions, setSubscriptions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetchSubscriptionData();\n  }, [userId]);\n  const fetchSubscriptionData = async () => {\n    try {\n      setLoading(true);\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      setSubscriptions(mockSubscriptions);\n    } catch (error) {\n      console.error('구독 정보를 불러오는데 실패했습니다:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleSubscriptionAdd = newSubscription => {\n    const subscription = {\n      ...newSubscription,\n      id: `subscription-${Date.now()}`\n    };\n    setSubscriptions(prev => [...prev, subscription]);\n  };\n  const handleSubscriptionDelete = subscriptionId => {\n    if (window.confirm('정말 이 구독을 해지하시겠습니까?')) {\n      setSubscriptions(prev => prev.filter(sub => sub.id !== subscriptionId));\n    }\n  };\n  const handleSubscriptionEdit = (subscriptionId, updatedData) => {\n    setSubscriptions(prev => prev.map(sub => sub.id === subscriptionId ? {\n      ...updatedData,\n      id: subscriptionId\n    } : sub));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\uAD6C\\uB3C5 \\uC815\\uBCF4\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911\\uC785\\uB2C8\\uB2E4...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(SubscriptionSummary, {\n        subscriptions: subscriptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SubscriptionList, {\n        subscriptions: subscriptions,\n        onSubscriptionAdd: handleSubscriptionAdd,\n        onSubscriptionEdit: handleSubscriptionEdit,\n        onSubscriptionDelete: handleSubscriptionDelete\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(SubscriptionDashboard, \"ScaNs3tmaIrxQGyA3EGVoHoEbzI=\");\n_c = SubscriptionDashboard;\nvar _c;\n$RefreshReg$(_c, \"SubscriptionDashboard\");","map":{"version":3,"names":["React","useState","useEffect","SubscriptionSummary","SubscriptionList","mockSubscriptions","jsxDEV","_jsxDEV","Fragment","_Fragment","SubscriptionDashboard","userId","_s","subscriptions","setSubscriptions","loading","setLoading","fetchSubscriptionData","Promise","resolve","setTimeout","error","console","handleSubscriptionAdd","newSubscription","subscription","id","Date","now","prev","handleSubscriptionDelete","subscriptionId","window","confirm","filter","sub","handleSubscriptionEdit","updatedData","map","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubscriptionAdd","onSubscriptionEdit","onSubscriptionDelete","_c","$RefreshReg$"],"sources":["C:/Users/USER/Desktop/sub/src/components/Dashboard/SubscriptionDashboard.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Subscription } from '../../types/subscription';\r\nimport { SubscriptionSummary } from './SubscriptionSummary';\r\nimport { SubscriptionList } from './SubscriptionList';\r\nimport { mockSubscriptions } from '../../data/mockData';\r\n\r\ninterface DashboardProps {\r\n  userId: string;\r\n}\r\n\r\nexport const SubscriptionDashboard: React.FC<DashboardProps> = ({ userId }) => {\r\n  const [subscriptions, setSubscriptions] = useState<Subscription[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetchSubscriptionData();\r\n  }, [userId]);\r\n\r\n  const fetchSubscriptionData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      setSubscriptions(mockSubscriptions);\r\n    } catch (error) {\r\n      console.error('구독 정보를 불러오는데 실패했습니다:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSubscriptionAdd = (newSubscription: Omit<Subscription, 'id'>) => {\r\n    const subscription: Subscription = {\r\n      ...newSubscription,\r\n      id: `subscription-${Date.now()}`\r\n    };\r\n    setSubscriptions(prev => [...prev, subscription]);\r\n  };\r\n\r\n  const handleSubscriptionDelete = (subscriptionId: string) => {\r\n    if (window.confirm('정말 이 구독을 해지하시겠습니까?')) {\r\n      setSubscriptions(prev => prev.filter(sub => sub.id !== subscriptionId));\r\n    }\r\n  };\r\n\r\n  const handleSubscriptionEdit = (\r\n    subscriptionId: string, \r\n    updatedData: Omit<Subscription, 'id'>\r\n  ) => {\r\n    setSubscriptions(prev => prev.map(sub => \r\n      sub.id === subscriptionId \r\n        ? { ...updatedData, id: subscriptionId }\r\n        : sub\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      {loading ? (\r\n        <div className=\"loading-container\">\r\n          <span>구독 정보를 불러오는 중입니다...</span>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <SubscriptionSummary subscriptions={subscriptions} />\r\n          <SubscriptionList \r\n            subscriptions={subscriptions} \r\n            onSubscriptionAdd={handleSubscriptionAdd}\r\n            onSubscriptionEdit={handleSubscriptionEdit}\r\n            onSubscriptionDelete={handleSubscriptionDelete}\r\n          />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}