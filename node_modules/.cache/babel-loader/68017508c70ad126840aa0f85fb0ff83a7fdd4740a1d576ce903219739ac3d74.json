{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\sub\\\\src\\\\components\\\\Dashboard\\\\SubscriptionDashboard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { SubscriptionSummary } from './SubscriptionSummary';\nimport { SubscriptionList } from './SubscriptionList';\nimport { RecommendationsList } from './RecommendationsList';\nimport { mockSubscriptions, mockAnalysis } from '../../data/mockData';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const SubscriptionDashboard = ({\n  userId\n}) => {\n  _s();\n  const [subscriptions, setSubscriptions] = useState([]);\n  const [analysis, setAnalysis] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetchSubscriptionData();\n  }, [userId]);\n  const fetchSubscriptionData = async () => {\n    try {\n      setLoading(true);\n      // API 호출을 시뮬레이션\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      setSubscriptions(mockSubscriptions);\n      setAnalysis(mockAnalysis);\n    } catch (error) {\n      console.error('구독 정보를 불러오는데 실패했습니다:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uB85C\\uB529 \\uC911...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(SubscriptionSummary, {\n        subscriptions: subscriptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SubscriptionList, {\n        subscriptions: subscriptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), analysis && /*#__PURE__*/_jsxDEV(RecommendationsList, {\n        recommendations: analysis.recommendations\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(SubscriptionDashboard, \"POCxyFgWyLAuCDXGFXLBxx0IiZE=\");\n_c = SubscriptionDashboard;\nvar _c;\n$RefreshReg$(_c, \"SubscriptionDashboard\");","map":{"version":3,"names":["React","useState","useEffect","SubscriptionSummary","SubscriptionList","RecommendationsList","mockSubscriptions","mockAnalysis","jsxDEV","_jsxDEV","Fragment","_Fragment","SubscriptionDashboard","userId","_s","subscriptions","setSubscriptions","analysis","setAnalysis","loading","setLoading","fetchSubscriptionData","Promise","resolve","setTimeout","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","recommendations","_c","$RefreshReg$"],"sources":["C:/Users/USER/Desktop/sub/src/components/Dashboard/SubscriptionDashboard.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Subscription } from '../../types/subscription';\r\nimport { SpendingAnalysis } from '../../types/analytics';\r\nimport { SubscriptionSummary } from './SubscriptionSummary';\r\nimport { SubscriptionList } from './SubscriptionList';\r\nimport { RecommendationsList } from './RecommendationsList';\r\nimport { mockSubscriptions, mockAnalysis } from '../../data/mockData';\r\n\r\ninterface DashboardProps {\r\n  userId: string;\r\n}\r\n\r\nexport const SubscriptionDashboard: React.FC<DashboardProps> = ({ userId }) => {\r\n  const [subscriptions, setSubscriptions] = useState<Subscription[]>([]);\r\n  const [analysis, setAnalysis] = useState<SpendingAnalysis | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetchSubscriptionData();\r\n  }, [userId]);\r\n\r\n  const fetchSubscriptionData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      // API 호출을 시뮬레이션\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      setSubscriptions(mockSubscriptions);\r\n      setAnalysis(mockAnalysis);\r\n    } catch (error) {\r\n      console.error('구독 정보를 불러오는데 실패했습니다:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      {loading ? (\r\n        <div>로딩 중...</div>\r\n      ) : (\r\n        <>\r\n          <SubscriptionSummary subscriptions={subscriptions} />\r\n          <SubscriptionList subscriptions={subscriptions} />\r\n          {analysis && <RecommendationsList recommendations={analysis.recommendations} />}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAGlD,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,SAASC,iBAAiB,EAAEC,YAAY,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAMtE,OAAO,MAAMC,qBAA+C,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC7E,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGf,QAAQ,CAAiB,EAAE,CAAC;EACtE,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAA0B,IAAI,CAAC;EACvE,MAAM,CAACkB,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACdmB,qBAAqB,CAAC,CAAC;EACzB,CAAC,EAAE,CAACR,MAAM,CAAC,CAAC;EAEZ,MAAMQ,qBAAqB,GAAG,MAAAA,CAAA,KAAY;IACxC,IAAI;MACFD,UAAU,CAAC,IAAI,CAAC;MAChB;MACA,MAAM,IAAIE,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;MACvDP,gBAAgB,CAACV,iBAAiB,CAAC;MACnCY,WAAW,CAACX,YAAY,CAAC;IAC3B,CAAC,CAAC,OAAOkB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C,CAAC,SAAS;MACRL,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,oBACEX,OAAA;IAAKkB,SAAS,EAAC,qBAAqB;IAAAC,QAAA,EACjCT,OAAO,gBACNV,OAAA;MAAAmB,QAAA,EAAK;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,gBAElBvB,OAAA,CAAAE,SAAA;MAAAiB,QAAA,gBACEnB,OAAA,CAACN,mBAAmB;QAACY,aAAa,EAAEA;MAAc;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACrDvB,OAAA,CAACL,gBAAgB;QAACW,aAAa,EAAEA;MAAc;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EACjDf,QAAQ,iBAAIR,OAAA,CAACJ,mBAAmB;QAAC4B,eAAe,EAAEhB,QAAQ,CAACgB;MAAgB;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,eAC/E;EACH;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAClB,EAAA,CApCWF,qBAA+C;AAAAsB,EAAA,GAA/CtB,qBAA+C;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}